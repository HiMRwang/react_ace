{"ast":null,"code":"ace.define(\"ace/snippets\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/lib/event_emitter\", \"ace/lib/lang\", \"ace/range\", \"ace/anchor\", \"ace/keyboard/hash_handler\", \"ace/tokenizer\", \"ace/lib/dom\", \"ace/editor\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"./lib/oop\");\n  var EventEmitter = acequire(\"./lib/event_emitter\").EventEmitter;\n  var lang = acequire(\"./lib/lang\");\n  var Range = acequire(\"./range\").Range;\n  var Anchor = acequire(\"./anchor\").Anchor;\n  var HashHandler = acequire(\"./keyboard/hash_handler\").HashHandler;\n  var Tokenizer = acequire(\"./tokenizer\").Tokenizer;\n  var comparePoints = Range.comparePoints;\n\n  var SnippetManager = function SnippetManager() {\n    this.snippetMap = {};\n    this.snippetNameMap = {};\n  };\n\n  (function () {\n    oop.implement(this, EventEmitter);\n\n    this.getTokenizer = function () {\n      function TabstopToken(str, _, stack) {\n        str = str.substr(1);\n\n        if (/^\\d+$/.test(str) && !stack.inFormatString) {\n          return [{\n            tabstopId: parseInt(str, 10)\n          }];\n        }\n\n        return [{\n          text: str\n        }];\n      }\n\n      function escape(ch) {\n        return \"(?:[^\\\\\\\\\" + ch + \"]|\\\\\\\\.)\";\n      }\n\n      SnippetManager.$tokenizer = new Tokenizer({\n        start: [{\n          regex: /:/,\n          onMatch: function onMatch(val, state, stack) {\n            if (stack.length && stack[0].expectIf) {\n              stack[0].expectIf = false;\n              stack[0].elseBranch = stack[0];\n              return [stack[0]];\n            }\n\n            return \":\";\n          }\n        }, {\n          regex: /\\\\./,\n          onMatch: function onMatch(val, state, stack) {\n            var ch = val[1];\n\n            if (ch == \"}\" && stack.length) {\n              val = ch;\n            } else if (\"`$\\\\\".indexOf(ch) != -1) {\n              val = ch;\n            } else if (stack.inFormatString) {\n              if (ch == \"n\") {\n                val = \"\\n\";\n              } else if (ch == \"t\") {\n                val = \"\\n\";\n              } else if (\"ulULE\".indexOf(ch) != -1) {\n                val = {\n                  changeCase: ch,\n                  local: ch > \"a\"\n                };\n              }\n            }\n\n            return [val];\n          }\n        }, {\n          regex: /}/,\n          onMatch: function onMatch(val, state, stack) {\n            return [stack.length ? stack.shift() : val];\n          }\n        }, {\n          regex: /\\$(?:\\d+|\\w+)/,\n          onMatch: TabstopToken\n        }, {\n          regex: /\\$\\{[\\dA-Z_a-z]+/,\n          onMatch: function onMatch(str, state, stack) {\n            var t = TabstopToken(str.substr(1), state, stack);\n            stack.unshift(t[0]);\n            return t;\n          },\n          next: \"snippetVar\"\n        }, {\n          regex: /\\n/,\n          token: \"newline\",\n          merge: false\n        }],\n        snippetVar: [{\n          regex: \"\\\\|\" + escape(\"\\\\|\") + \"*\\\\|\",\n          onMatch: function onMatch(val, state, stack) {\n            stack[0].choices = val.slice(1, -1).split(\",\");\n          },\n          next: \"start\"\n        }, {\n          regex: \"/(\" + escape(\"/\") + \"+)/(?:(\" + escape(\"/\") + \"*)/)(\\\\w*):?\",\n          onMatch: function onMatch(val, state, stack) {\n            var ts = stack[0];\n            ts.fmtString = val;\n            val = this.splitRegex.exec(val);\n            ts.guard = val[1];\n            ts.fmt = val[2];\n            ts.flag = val[3];\n            return \"\";\n          },\n          next: \"start\"\n        }, {\n          regex: \"`\" + escape(\"`\") + \"*`\",\n          onMatch: function onMatch(val, state, stack) {\n            stack[0].code = val.splice(1, -1);\n            return \"\";\n          },\n          next: \"start\"\n        }, {\n          regex: \"\\\\?\",\n          onMatch: function onMatch(val, state, stack) {\n            if (stack[0]) {\n              stack[0].expectIf = true;\n            }\n          },\n          next: \"start\"\n        }, {\n          regex: \"([^:}\\\\\\\\]|\\\\\\\\.)*:?\",\n          token: \"\",\n          next: \"start\"\n        }],\n        formatString: [{\n          regex: \"/(\" + escape(\"/\") + \"+)/\",\n          token: \"regex\"\n        }, {\n          regex: \"\",\n          onMatch: function onMatch(val, state, stack) {\n            stack.inFormatString = true;\n          },\n          next: \"start\"\n        }]\n      });\n\n      SnippetManager.prototype.getTokenizer = function () {\n        return SnippetManager.$tokenizer;\n      };\n\n      return SnippetManager.$tokenizer;\n    };\n\n    this.tokenizeTmSnippet = function (str, startState) {\n      return this.getTokenizer().getLineTokens(str, startState).tokens.map(function (x) {\n        return x.value || x;\n      });\n    };\n\n    this.$getDefaultValue = function (editor, name) {\n      if (/^[A-Z]\\d+$/.test(name)) {\n        var i = name.substr(1);\n        return (this.variables[name[0] + \"__\"] || {})[i];\n      }\n\n      if (/^\\d+$/.test(name)) {\n        return (this.variables.__ || {})[name];\n      }\n\n      name = name.replace(/^TM_/, \"\");\n\n      if (!editor) {\n        return;\n      }\n\n      var s = editor.session;\n\n      switch (name) {\n        case \"CURRENT_WORD\":\n          var r = s.getWordRange();\n\n        case \"SELECTION\":\n        case \"SELECTED_TEXT\":\n          return s.getTextRange(r);\n\n        case \"CURRENT_LINE\":\n          return s.getLine(editor.getCursorPosition().row);\n\n        case \"PREV_LINE\":\n          // not possible in textmate\n          return s.getLine(editor.getCursorPosition().row - 1);\n\n        case \"LINE_INDEX\":\n          return editor.getCursorPosition().column;\n\n        case \"LINE_NUMBER\":\n          return editor.getCursorPosition().row + 1;\n\n        case \"SOFT_TABS\":\n          return s.getUseSoftTabs() ? \"YES\" : \"NO\";\n\n        case \"TAB_SIZE\":\n          return s.getTabSize();\n\n        case \"FILENAME\":\n        case \"FILEPATH\":\n          return \"\";\n\n        case \"FULLNAME\":\n          return \"Ace\";\n      }\n    };\n\n    this.variables = {};\n\n    this.getVariableValue = function (editor, varName) {\n      if (this.variables.hasOwnProperty(varName)) {\n        return this.variables[varName](editor, varName) || \"\";\n      }\n\n      return this.$getDefaultValue(editor, varName) || \"\";\n    };\n\n    this.tmStrFormat = function (str, ch, editor) {\n      var flag = ch.flag || \"\";\n      var re = ch.guard;\n      re = new RegExp(re, flag.replace(/[^gi]/, \"\"));\n      var fmtTokens = this.tokenizeTmSnippet(ch.fmt, \"formatString\");\n\n      var _self = this;\n\n      var formatted = str.replace(re, function () {\n        _self.variables.__ = arguments;\n\n        var fmtParts = _self.resolveVariables(fmtTokens, editor);\n\n        var gChangeCase = \"E\";\n\n        for (var i = 0; i < fmtParts.length; i++) {\n          var ch = fmtParts[i];\n\n          if (typeof ch == \"object\") {\n            fmtParts[i] = \"\";\n\n            if (ch.changeCase && ch.local) {\n              var next = fmtParts[i + 1];\n\n              if (next && typeof next == \"string\") {\n                if (ch.changeCase == \"u\") {\n                  fmtParts[i] = next[0].toUpperCase();\n                } else {\n                  fmtParts[i] = next[0].toLowerCase();\n                }\n\n                fmtParts[i + 1] = next.substr(1);\n              }\n            } else if (ch.changeCase) {\n              gChangeCase = ch.changeCase;\n            }\n          } else if (gChangeCase == \"U\") {\n            fmtParts[i] = ch.toUpperCase();\n          } else if (gChangeCase == \"L\") {\n            fmtParts[i] = ch.toLowerCase();\n          }\n        }\n\n        return fmtParts.join(\"\");\n      });\n      this.variables.__ = null;\n      return formatted;\n    };\n\n    this.resolveVariables = function (snippet, editor) {\n      var result = [];\n\n      for (var i = 0; i < snippet.length; i++) {\n        var ch = snippet[i];\n\n        if (typeof ch == \"string\") {\n          result.push(ch);\n        } else if (typeof ch != \"object\") {\n          continue;\n        } else if (ch.skip) {\n          gotoNext(ch);\n        } else if (ch.processed < i) {\n          continue;\n        } else if (ch.text) {\n          var value = this.getVariableValue(editor, ch.text);\n\n          if (value && ch.fmtString) {\n            value = this.tmStrFormat(value, ch);\n          }\n\n          ch.processed = i;\n\n          if (ch.expectIf == null) {\n            if (value) {\n              result.push(value);\n              gotoNext(ch);\n            }\n          } else {\n            if (value) {\n              ch.skip = ch.elseBranch;\n            } else {\n              gotoNext(ch);\n            }\n          }\n        } else if (ch.tabstopId != null) {\n          result.push(ch);\n        } else if (ch.changeCase != null) {\n          result.push(ch);\n        }\n      }\n\n      function gotoNext(ch) {\n        var i1 = snippet.indexOf(ch, i + 1);\n\n        if (i1 != -1) {\n          i = i1;\n        }\n      }\n\n      return result;\n    };\n\n    this.insertSnippetForSelection = function (editor, snippetText) {\n      var cursor = editor.getCursorPosition();\n      var line = editor.session.getLine(cursor.row);\n      var tabString = editor.session.getTabString();\n      var indentString = line.match(/^\\s*/)[0];\n\n      if (cursor.column < indentString.length) {\n        indentString = indentString.slice(0, cursor.column);\n      }\n\n      snippetText = snippetText.replace(/\\r/g, \"\");\n      var tokens = this.tokenizeTmSnippet(snippetText);\n      tokens = this.resolveVariables(tokens, editor);\n      tokens = tokens.map(function (x) {\n        if (x == \"\\n\") {\n          return x + indentString;\n        }\n\n        if (typeof x == \"string\") {\n          return x.replace(/\\t/g, tabString);\n        }\n\n        return x;\n      });\n      var tabstops = [];\n      tokens.forEach(function (p, i) {\n        if (typeof p != \"object\") {\n          return;\n        }\n\n        var id = p.tabstopId;\n        var ts = tabstops[id];\n\n        if (!ts) {\n          ts = tabstops[id] = [];\n          ts.index = id;\n          ts.value = \"\";\n        }\n\n        if (ts.indexOf(p) !== -1) {\n          return;\n        }\n\n        ts.push(p);\n        var i1 = tokens.indexOf(p, i + 1);\n\n        if (i1 === -1) {\n          return;\n        }\n\n        var value = tokens.slice(i + 1, i1);\n        var isNested = value.some(function (t) {\n          return typeof t === \"object\";\n        });\n\n        if (isNested && !ts.value) {\n          ts.value = value;\n        } else if (value.length && (!ts.value || typeof ts.value !== \"string\")) {\n          ts.value = value.join(\"\");\n        }\n      });\n      tabstops.forEach(function (ts) {\n        ts.length = 0;\n      });\n      var expanding = {};\n\n      function copyValue(val) {\n        var copy = [];\n\n        for (var i = 0; i < val.length; i++) {\n          var p = val[i];\n\n          if (typeof p == \"object\") {\n            if (expanding[p.tabstopId]) {\n              continue;\n            }\n\n            var j = val.lastIndexOf(p, i - 1);\n            p = copy[j] || {\n              tabstopId: p.tabstopId\n            };\n          }\n\n          copy[i] = p;\n        }\n\n        return copy;\n      }\n\n      for (var i = 0; i < tokens.length; i++) {\n        var p = tokens[i];\n\n        if (typeof p != \"object\") {\n          continue;\n        }\n\n        var id = p.tabstopId;\n        var i1 = tokens.indexOf(p, i + 1);\n\n        if (expanding[id]) {\n          if (expanding[id] === p) {\n            expanding[id] = null;\n          }\n\n          continue;\n        }\n\n        var ts = tabstops[id];\n        var arg = typeof ts.value == \"string\" ? [ts.value] : copyValue(ts.value);\n        arg.unshift(i + 1, Math.max(0, i1 - i));\n        arg.push(p);\n        expanding[id] = p;\n        tokens.splice.apply(tokens, arg);\n\n        if (ts.indexOf(p) === -1) {\n          ts.push(p);\n        }\n      }\n\n      var row = 0;\n      var column = 0;\n      var text = \"\";\n      tokens.forEach(function (t) {\n        if (typeof t === \"string\") {\n          var lines = t.split(\"\\n\");\n\n          if (lines.length > 1) {\n            column = lines[lines.length - 1].length;\n            row += lines.length - 1;\n          } else {\n            column += t.length;\n          }\n\n          text += t;\n        } else {\n          if (!t.start) {\n            t.start = {\n              row: row,\n              column: column\n            };\n          } else {\n            t.end = {\n              row: row,\n              column: column\n            };\n          }\n        }\n      });\n      var range = editor.getSelectionRange();\n      var end = editor.session.replace(range, text);\n      var tabstopManager = new TabstopManager(editor);\n      var selectionId = editor.inVirtualSelectionMode && editor.selection.index;\n      tabstopManager.addTabstops(tabstops, range.start, end, selectionId);\n    };\n\n    this.insertSnippet = function (editor, snippetText) {\n      var self = this;\n\n      if (editor.inVirtualSelectionMode) {\n        return self.insertSnippetForSelection(editor, snippetText);\n      }\n\n      editor.forEachSelection(function () {\n        self.insertSnippetForSelection(editor, snippetText);\n      }, null, {\n        keepOrder: true\n      });\n\n      if (editor.tabstopManager) {\n        editor.tabstopManager.tabNext();\n      }\n    };\n\n    this.$getScope = function (editor) {\n      var scope = editor.session.$mode.$id || \"\";\n      scope = scope.split(\"/\").pop();\n\n      if (scope === \"html\" || scope === \"php\") {\n        if (scope === \"php\" && !editor.session.$mode.inlinePhp) {\n          scope = \"html\";\n        }\n\n        var c = editor.getCursorPosition();\n        var state = editor.session.getState(c.row);\n\n        if (typeof state === \"object\") {\n          state = state[0];\n        }\n\n        if (state.substring) {\n          if (state.substring(0, 3) == \"js-\") {\n            scope = \"javascript\";\n          } else if (state.substring(0, 4) == \"css-\") {\n            scope = \"css\";\n          } else if (state.substring(0, 4) == \"php-\") {\n            scope = \"php\";\n          }\n        }\n      }\n\n      return scope;\n    };\n\n    this.getActiveScopes = function (editor) {\n      var scope = this.$getScope(editor);\n      var scopes = [scope];\n      var snippetMap = this.snippetMap;\n\n      if (snippetMap[scope] && snippetMap[scope].includeScopes) {\n        scopes.push.apply(scopes, snippetMap[scope].includeScopes);\n      }\n\n      scopes.push(\"_\");\n      return scopes;\n    };\n\n    this.expandWithTab = function (editor, options) {\n      var self = this;\n      var result = editor.forEachSelection(function () {\n        return self.expandSnippetForSelection(editor, options);\n      }, null, {\n        keepOrder: true\n      });\n\n      if (result && editor.tabstopManager) {\n        editor.tabstopManager.tabNext();\n      }\n\n      return result;\n    };\n\n    this.expandSnippetForSelection = function (editor, options) {\n      var cursor = editor.getCursorPosition();\n      var line = editor.session.getLine(cursor.row);\n      var before = line.substring(0, cursor.column);\n      var after = line.substr(cursor.column);\n      var snippetMap = this.snippetMap;\n      var snippet;\n      this.getActiveScopes(editor).some(function (scope) {\n        var snippets = snippetMap[scope];\n\n        if (snippets) {\n          snippet = this.findMatchingSnippet(snippets, before, after);\n        }\n\n        return !!snippet;\n      }, this);\n\n      if (!snippet) {\n        return false;\n      }\n\n      if (options && options.dryRun) {\n        return true;\n      }\n\n      editor.session.doc.removeInLine(cursor.row, cursor.column - snippet.replaceBefore.length, cursor.column + snippet.replaceAfter.length);\n      this.variables.M__ = snippet.matchBefore;\n      this.variables.T__ = snippet.matchAfter;\n      this.insertSnippetForSelection(editor, snippet.content);\n      this.variables.M__ = this.variables.T__ = null;\n      return true;\n    };\n\n    this.findMatchingSnippet = function (snippetList, before, after) {\n      for (var i = snippetList.length; i--;) {\n        var s = snippetList[i];\n\n        if (s.startRe && !s.startRe.test(before)) {\n          continue;\n        }\n\n        if (s.endRe && !s.endRe.test(after)) {\n          continue;\n        }\n\n        if (!s.startRe && !s.endRe) {\n          continue;\n        }\n\n        s.matchBefore = s.startRe ? s.startRe.exec(before) : [\"\"];\n        s.matchAfter = s.endRe ? s.endRe.exec(after) : [\"\"];\n        s.replaceBefore = s.triggerRe ? s.triggerRe.exec(before)[0] : \"\";\n        s.replaceAfter = s.endTriggerRe ? s.endTriggerRe.exec(after)[0] : \"\";\n        return s;\n      }\n    };\n\n    this.snippetMap = {};\n    this.snippetNameMap = {};\n\n    this.register = function (snippets, scope) {\n      var snippetMap = this.snippetMap;\n      var snippetNameMap = this.snippetNameMap;\n      var self = this;\n\n      if (!snippets) {\n        snippets = [];\n      }\n\n      function wrapRegexp(src) {\n        if (src && !/^\\^?\\(.*\\)\\$?$|^\\\\b$/.test(src)) {\n          src = \"(?:\" + src + \")\";\n        }\n\n        return src || \"\";\n      }\n\n      function guardedRegexp(re, guard, opening) {\n        re = wrapRegexp(re);\n        guard = wrapRegexp(guard);\n\n        if (opening) {\n          re = guard + re;\n\n          if (re && re[re.length - 1] != \"$\") {\n            re = re + \"$\";\n          }\n        } else {\n          re = re + guard;\n\n          if (re && re[0] != \"^\") {\n            re = \"^\" + re;\n          }\n        }\n\n        return new RegExp(re);\n      }\n\n      function addSnippet(s) {\n        if (!s.scope) {\n          s.scope = scope || \"_\";\n        }\n\n        scope = s.scope;\n\n        if (!snippetMap[scope]) {\n          snippetMap[scope] = [];\n          snippetNameMap[scope] = {};\n        }\n\n        var map = snippetNameMap[scope];\n\n        if (s.name) {\n          var old = map[s.name];\n\n          if (old) {\n            self.unregister(old);\n          }\n\n          map[s.name] = s;\n        }\n\n        snippetMap[scope].push(s);\n\n        if (s.tabTrigger && !s.trigger) {\n          if (!s.guard && /^\\w/.test(s.tabTrigger)) {\n            s.guard = \"\\\\b\";\n          }\n\n          s.trigger = lang.escapeRegExp(s.tabTrigger);\n        }\n\n        if (!s.trigger && !s.guard && !s.endTrigger && !s.endGuard) {\n          return;\n        }\n\n        s.startRe = guardedRegexp(s.trigger, s.guard, true);\n        s.triggerRe = new RegExp(s.trigger, \"\", true);\n        s.endRe = guardedRegexp(s.endTrigger, s.endGuard, true);\n        s.endTriggerRe = new RegExp(s.endTrigger, \"\", true);\n      }\n\n      if (snippets && snippets.content) {\n        addSnippet(snippets);\n      } else if (Array.isArray(snippets)) {\n        snippets.forEach(addSnippet);\n      }\n\n      this._signal(\"registerSnippets\", {\n        scope: scope\n      });\n    };\n\n    this.unregister = function (snippets, scope) {\n      var snippetMap = this.snippetMap;\n      var snippetNameMap = this.snippetNameMap;\n\n      function removeSnippet(s) {\n        var nameMap = snippetNameMap[s.scope || scope];\n\n        if (nameMap && nameMap[s.name]) {\n          delete nameMap[s.name];\n          var map = snippetMap[s.scope || scope];\n          var i = map && map.indexOf(s);\n\n          if (i >= 0) {\n            map.splice(i, 1);\n          }\n        }\n      }\n\n      if (snippets.content) {\n        removeSnippet(snippets);\n      } else if (Array.isArray(snippets)) {\n        snippets.forEach(removeSnippet);\n      }\n    };\n\n    this.parseSnippetFile = function (str) {\n      str = str.replace(/\\r/g, \"\");\n      var list = [];\n      var snippet = {};\n      var re = /^#.*|^({[\\s\\S]*})\\s*$|^(\\S+) (.*)$|^((?:\\n*\\t.*)+)/gm;\n      var m;\n\n      while (m = re.exec(str)) {\n        if (m[1]) {\n          try {\n            snippet = JSON.parse(m[1]);\n            list.push(snippet);\n          } catch (e) {}\n        }\n\n        if (m[4]) {\n          snippet.content = m[4].replace(/^\\t/gm, \"\");\n          list.push(snippet);\n          snippet = {};\n        } else {\n          var key = m[2];\n          var val = m[3];\n\n          if (key == \"regex\") {\n            var guardRe = /\\/((?:[^\\/\\\\]|\\\\.)*)|$/g;\n            snippet.guard = guardRe.exec(val)[1];\n            snippet.trigger = guardRe.exec(val)[1];\n            snippet.endTrigger = guardRe.exec(val)[1];\n            snippet.endGuard = guardRe.exec(val)[1];\n          } else if (key == \"snippet\") {\n            snippet.tabTrigger = val.match(/^\\S*/)[0];\n\n            if (!snippet.name) {\n              snippet.name = val;\n            }\n          } else {\n            snippet[key] = val;\n          }\n        }\n      }\n\n      return list;\n    };\n\n    this.getSnippetByName = function (name, editor) {\n      var snippetMap = this.snippetNameMap;\n      var snippet;\n      this.getActiveScopes(editor).some(function (scope) {\n        var snippets = snippetMap[scope];\n\n        if (snippets) {\n          snippet = snippets[name];\n        }\n\n        return !!snippet;\n      }, this);\n      return snippet;\n    };\n  }).call(SnippetManager.prototype);\n\n  var TabstopManager = function TabstopManager(editor) {\n    if (editor.tabstopManager) {\n      return editor.tabstopManager;\n    }\n\n    editor.tabstopManager = this;\n    this.$onChange = this.onChange.bind(this);\n    this.$onChangeSelection = lang.delayedCall(this.onChangeSelection.bind(this)).schedule;\n    this.$onChangeSession = this.onChangeSession.bind(this);\n    this.$onAfterExec = this.onAfterExec.bind(this);\n    this.attach(editor);\n  };\n\n  (function () {\n    this.attach = function (editor) {\n      this.index = 0;\n      this.ranges = [];\n      this.tabstops = [];\n      this.$openTabstops = null;\n      this.selectedTabstop = null;\n      this.editor = editor;\n      this.editor.on(\"change\", this.$onChange);\n      this.editor.on(\"changeSelection\", this.$onChangeSelection);\n      this.editor.on(\"changeSession\", this.$onChangeSession);\n      this.editor.commands.on(\"afterExec\", this.$onAfterExec);\n      this.editor.keyBinding.addKeyboardHandler(this.keyboardHandler);\n    };\n\n    this.detach = function () {\n      this.tabstops.forEach(this.removeTabstopMarkers, this);\n      this.ranges = null;\n      this.tabstops = null;\n      this.selectedTabstop = null;\n      this.editor.removeListener(\"change\", this.$onChange);\n      this.editor.removeListener(\"changeSelection\", this.$onChangeSelection);\n      this.editor.removeListener(\"changeSession\", this.$onChangeSession);\n      this.editor.commands.removeListener(\"afterExec\", this.$onAfterExec);\n      this.editor.keyBinding.removeKeyboardHandler(this.keyboardHandler);\n      this.editor.tabstopManager = null;\n      this.editor = null;\n    };\n\n    this.onChange = function (delta) {\n      var changeRange = delta;\n      var isRemove = delta.action[0] == \"r\";\n      var start = delta.start;\n      var end = delta.end;\n      var startRow = start.row;\n      var endRow = end.row;\n      var lineDif = endRow - startRow;\n      var colDiff = end.column - start.column;\n\n      if (isRemove) {\n        lineDif = -lineDif;\n        colDiff = -colDiff;\n      }\n\n      if (!this.$inChange && isRemove) {\n        var ts = this.selectedTabstop;\n        var changedOutside = ts && !ts.some(function (r) {\n          return comparePoints(r.start, start) <= 0 && comparePoints(r.end, end) >= 0;\n        });\n\n        if (changedOutside) {\n          return this.detach();\n        }\n      }\n\n      var ranges = this.ranges;\n\n      for (var i = 0; i < ranges.length; i++) {\n        var r = ranges[i];\n\n        if (r.end.row < start.row) {\n          continue;\n        }\n\n        if (isRemove && comparePoints(start, r.start) < 0 && comparePoints(end, r.end) > 0) {\n          this.removeRange(r);\n          i--;\n          continue;\n        }\n\n        if (r.start.row == startRow && r.start.column > start.column) {\n          r.start.column += colDiff;\n        }\n\n        if (r.end.row == startRow && r.end.column >= start.column) {\n          r.end.column += colDiff;\n        }\n\n        if (r.start.row >= startRow) {\n          r.start.row += lineDif;\n        }\n\n        if (r.end.row >= startRow) {\n          r.end.row += lineDif;\n        }\n\n        if (comparePoints(r.start, r.end) > 0) {\n          this.removeRange(r);\n        }\n      }\n\n      if (!ranges.length) {\n        this.detach();\n      }\n    };\n\n    this.updateLinkedFields = function () {\n      var ts = this.selectedTabstop;\n\n      if (!ts || !ts.hasLinkedRanges) {\n        return;\n      }\n\n      this.$inChange = true;\n      var session = this.editor.session;\n      var text = session.getTextRange(ts.firstNonLinked);\n\n      for (var i = ts.length; i--;) {\n        var range = ts[i];\n\n        if (!range.linked) {\n          continue;\n        }\n\n        var fmt = exports.snippetManager.tmStrFormat(text, range.original);\n        session.replace(range, fmt);\n      }\n\n      this.$inChange = false;\n    };\n\n    this.onAfterExec = function (e) {\n      if (e.command && !e.command.readOnly) {\n        this.updateLinkedFields();\n      }\n    };\n\n    this.onChangeSelection = function () {\n      if (!this.editor) {\n        return;\n      }\n\n      var lead = this.editor.selection.lead;\n      var anchor = this.editor.selection.anchor;\n      var isEmpty = this.editor.selection.isEmpty();\n\n      for (var i = this.ranges.length; i--;) {\n        if (this.ranges[i].linked) {\n          continue;\n        }\n\n        var containsLead = this.ranges[i].contains(lead.row, lead.column);\n        var containsAnchor = isEmpty || this.ranges[i].contains(anchor.row, anchor.column);\n\n        if (containsLead && containsAnchor) {\n          return;\n        }\n      }\n\n      this.detach();\n    };\n\n    this.onChangeSession = function () {\n      this.detach();\n    };\n\n    this.tabNext = function (dir) {\n      var max = this.tabstops.length;\n      var index = this.index + (dir || 1);\n      index = Math.min(Math.max(index, 1), max);\n\n      if (index == max) {\n        index = 0;\n      }\n\n      this.selectTabstop(index);\n\n      if (index === 0) {\n        this.detach();\n      }\n    };\n\n    this.selectTabstop = function (index) {\n      this.$openTabstops = null;\n      var ts = this.tabstops[this.index];\n\n      if (ts) {\n        this.addTabstopMarkers(ts);\n      }\n\n      this.index = index;\n      ts = this.tabstops[this.index];\n\n      if (!ts || !ts.length) {\n        return;\n      }\n\n      this.selectedTabstop = ts;\n\n      if (!this.editor.inVirtualSelectionMode) {\n        var sel = this.editor.multiSelect;\n        sel.toSingleRange(ts.firstNonLinked.clone());\n\n        for (var i = ts.length; i--;) {\n          if (ts.hasLinkedRanges && ts[i].linked) {\n            continue;\n          }\n\n          sel.addRange(ts[i].clone(), true);\n        }\n\n        if (sel.ranges[0]) {\n          sel.addRange(sel.ranges[0].clone());\n        }\n      } else {\n        this.editor.selection.setRange(ts.firstNonLinked);\n      }\n\n      this.editor.keyBinding.addKeyboardHandler(this.keyboardHandler);\n    };\n\n    this.addTabstops = function (tabstops, start, end) {\n      if (!this.$openTabstops) {\n        this.$openTabstops = [];\n      }\n\n      if (!tabstops[0]) {\n        var p = Range.fromPoints(end, end);\n        moveRelative(p.start, start);\n        moveRelative(p.end, start);\n        tabstops[0] = [p];\n        tabstops[0].index = 0;\n      }\n\n      var i = this.index;\n      var arg = [i + 1, 0];\n      var ranges = this.ranges;\n      tabstops.forEach(function (ts, index) {\n        var dest = this.$openTabstops[index] || ts;\n\n        for (var i = ts.length; i--;) {\n          var p = ts[i];\n          var range = Range.fromPoints(p.start, p.end || p.start);\n          movePoint(range.start, start);\n          movePoint(range.end, start);\n          range.original = p;\n          range.tabstop = dest;\n          ranges.push(range);\n\n          if (dest != ts) {\n            dest.unshift(range);\n          } else {\n            dest[i] = range;\n          }\n\n          if (p.fmtString) {\n            range.linked = true;\n            dest.hasLinkedRanges = true;\n          } else if (!dest.firstNonLinked) {\n            dest.firstNonLinked = range;\n          }\n        }\n\n        if (!dest.firstNonLinked) {\n          dest.hasLinkedRanges = false;\n        }\n\n        if (dest === ts) {\n          arg.push(dest);\n          this.$openTabstops[index] = dest;\n        }\n\n        this.addTabstopMarkers(dest);\n      }, this);\n\n      if (arg.length > 2) {\n        if (this.tabstops.length) {\n          arg.push(arg.splice(2, 1)[0]);\n        }\n\n        this.tabstops.splice.apply(this.tabstops, arg);\n      }\n    };\n\n    this.addTabstopMarkers = function (ts) {\n      var session = this.editor.session;\n      ts.forEach(function (range) {\n        if (!range.markerId) {\n          range.markerId = session.addMarker(range, \"ace_snippet-marker\", \"text\");\n        }\n      });\n    };\n\n    this.removeTabstopMarkers = function (ts) {\n      var session = this.editor.session;\n      ts.forEach(function (range) {\n        session.removeMarker(range.markerId);\n        range.markerId = null;\n      });\n    };\n\n    this.removeRange = function (range) {\n      var i = range.tabstop.indexOf(range);\n      range.tabstop.splice(i, 1);\n      i = this.ranges.indexOf(range);\n      this.ranges.splice(i, 1);\n      this.editor.session.removeMarker(range.markerId);\n\n      if (!range.tabstop.length) {\n        i = this.tabstops.indexOf(range.tabstop);\n\n        if (i != -1) {\n          this.tabstops.splice(i, 1);\n        }\n\n        if (!this.tabstops.length) {\n          this.detach();\n        }\n      }\n    };\n\n    this.keyboardHandler = new HashHandler();\n    this.keyboardHandler.bindKeys({\n      \"Tab\": function Tab(ed) {\n        if (exports.snippetManager && exports.snippetManager.expandWithTab(ed)) {\n          return;\n        }\n\n        ed.tabstopManager.tabNext(1);\n      },\n      \"Shift-Tab\": function ShiftTab(ed) {\n        ed.tabstopManager.tabNext(-1);\n      },\n      \"Esc\": function Esc(ed) {\n        ed.tabstopManager.detach();\n      },\n      \"Return\": function Return(ed) {\n        return false;\n      }\n    });\n  }).call(TabstopManager.prototype);\n  var changeTracker = {};\n  changeTracker.onChange = Anchor.prototype.onChange;\n\n  changeTracker.setPosition = function (row, column) {\n    this.pos.row = row;\n    this.pos.column = column;\n  };\n\n  changeTracker.update = function (pos, delta, $insertRight) {\n    this.$insertRight = $insertRight;\n    this.pos = pos;\n    this.onChange(delta);\n  };\n\n  var movePoint = function movePoint(point, diff) {\n    if (point.row == 0) {\n      point.column += diff.column;\n    }\n\n    point.row += diff.row;\n  };\n\n  var moveRelative = function moveRelative(point, start) {\n    if (point.row == start.row) {\n      point.column -= start.column;\n    }\n\n    point.row -= start.row;\n  };\n\n  acequire(\"./lib/dom\").importCssString(\"\\\n.ace_snippet-marker {\\\n    -moz-box-sizing: border-box;\\\n    box-sizing: border-box;\\\n    background: rgba(194, 193, 208, 0.09);\\\n    border: 1px dotted rgba(211, 208, 235, 0.62);\\\n    position: absolute;\\\n}\");\n  exports.snippetManager = new SnippetManager();\n  var Editor = acequire(\"./editor\").Editor;\n  (function () {\n    this.insertSnippet = function (content, options) {\n      return exports.snippetManager.insertSnippet(this, content, options);\n    };\n\n    this.expandSnippet = function (options) {\n      return exports.snippetManager.expandWithTab(this, options);\n    };\n  }).call(Editor.prototype);\n});\nace.define(\"ace/autocomplete/popup\", [\"require\", \"exports\", \"module\", \"ace/virtual_renderer\", \"ace/editor\", \"ace/range\", \"ace/lib/event\", \"ace/lib/lang\", \"ace/lib/dom\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var Renderer = acequire(\"../virtual_renderer\").VirtualRenderer;\n  var Editor = acequire(\"../editor\").Editor;\n  var Range = acequire(\"../range\").Range;\n  var event = acequire(\"../lib/event\");\n  var lang = acequire(\"../lib/lang\");\n  var dom = acequire(\"../lib/dom\"); // 初始化editor\n\n  var $singleLineEditor = function $singleLineEditor(el) {\n    var renderer = new Renderer(el);\n    renderer.$maxLines = 4;\n    var editor = new Editor(renderer);\n    editor.setHighlightActiveLine(false);\n    editor.setShowPrintMargin(false);\n    editor.renderer.setShowGutter(false);\n    editor.renderer.setHighlightGutterLine(false);\n    editor.$mouseHandler.$focusWaitTimout = 0;\n    editor.$highlightTagPending = true;\n    return editor;\n  };\n\n  var AcePopup = function AcePopup(parentNode) {\n    var el = dom.createElement(\"div\");\n    var popup = new $singleLineEditor(el);\n\n    if (parentNode) {\n      parentNode.appendChild(el);\n    }\n\n    el.style.display = \"none\";\n    popup.renderer.content.style.cursor = \"default\";\n    popup.renderer.setStyle(\"ace_autocomplete\");\n    popup.setOption(\"displayIndentGuides\", false);\n    popup.setOption(\"dragDelay\", 150);\n\n    var noop = function noop() {};\n\n    popup.focus = noop;\n    popup.$isFocused = true;\n    popup.renderer.$cursorLayer.restartTimer = noop;\n    popup.renderer.$cursorLayer.element.style.opacity = 0;\n    popup.renderer.$maxLines = 8;\n    popup.renderer.$keepTextAreaAtCursor = false;\n    popup.setHighlightActiveLine(false);\n    popup.session.highlight(\"\");\n    popup.session.$searchHighlight.clazz = \"ace_highlight-marker\"; // 鼠标按下选择completion\n\n    popup.on(\"mousedown\", function (e) {\n      var pos = e.getDocumentPosition();\n      popup.selection.moveToPosition(pos);\n      selectionMarker.start.row = selectionMarker.end.row = pos.row;\n      e.stop();\n    });\n    var lastMouseEvent;\n    var hoverMarker = new Range(-1, 0, -1, Infinity);\n    var selectionMarker = new Range(-1, 0, -1, Infinity);\n    selectionMarker.id = popup.session.addMarker(selectionMarker, \"ace_active-line\", \"fullLine\");\n\n    popup.setSelectOnHover = function (val) {\n      if (!val) {\n        hoverMarker.id = popup.session.addMarker(hoverMarker, \"ace_line-hover\", \"fullLine\");\n      } else if (hoverMarker.id) {\n        popup.session.removeMarker(hoverMarker.id);\n        hoverMarker.id = null;\n      }\n    };\n\n    popup.setSelectOnHover(false); // 鼠标移动\n\n    popup.on(\"mousemove\", function (e) {\n      if (!lastMouseEvent) {\n        lastMouseEvent = e;\n        return;\n      }\n\n      if (lastMouseEvent.x == e.x && lastMouseEvent.y == e.y) {\n        return;\n      }\n\n      lastMouseEvent = e;\n      lastMouseEvent.scrollTop = popup.renderer.scrollTop; // 提示所在提示框中的行数\n\n      var row = lastMouseEvent.getDocumentPosition().row;\n\n      if (hoverMarker.start.row != row) {\n        if (!hoverMarker.id) {\n          popup.setRow(row);\n        }\n\n        setHoverMarker(row);\n      }\n    }); // 在渲染之前\n\n    popup.renderer.on(\"beforeRender\", function () {\n      if (lastMouseEvent && hoverMarker.start.row != -1) {\n        lastMouseEvent.$pos = null; //  completion 所在提示框中的行数\n\n        var row = lastMouseEvent.getDocumentPosition().row;\n\n        if (!hoverMarker.id) {\n          popup.setRow(row);\n        }\n\n        setHoverMarker(row, true);\n      }\n    }); // 渲染之后 ,确保selected和selectedNode相同\n\n    popup.renderer.on(\"afterRender\", function () {\n      var row = popup.getRow();\n      var t = popup.renderer.$textLayer; //选中的行\n\n      var selected = t.element.childNodes[row - t.config.firstRow];\n\n      if (selected == t.selectedNode) {\n        return;\n      }\n\n      if (t.selectedNode) {\n        dom.removeCssClass(t.selectedNode, \"ace_selected\");\n      }\n\n      t.selectedNode = selected;\n\n      if (selected) {\n        dom.addCssClass(selected, \"ace_selected\");\n      }\n    }); //隐藏hover\n\n    var hideHoverMarker = function hideHoverMarker() {\n      setHoverMarker(-1);\n    }; // 设置hover\n\n\n    var setHoverMarker = function setHoverMarker(row, suppressRedraw) {\n      // hoverMarker.start.row  -1\n      if (row !== hoverMarker.start.row) {\n        hoverMarker.start.row = hoverMarker.end.row = row;\n\n        if (!suppressRedraw) {\n          popup.session._emit(\"changeBackMarker\");\n        }\n\n        popup._emit(\"changeHoverMarker\");\n      }\n    };\n\n    popup.getHoveredRow = function () {\n      return hoverMarker.start.row;\n    };\n\n    event.addListener(popup.container, \"mouseout\", hideHoverMarker);\n    popup.on(\"hide\", hideHoverMarker);\n    popup.on(\"changeSelection\", hideHoverMarker); //completions[]的长度  提示的总数量\n\n    popup.session.doc.getLength = function () {\n      return popup.data.length;\n    };\n\n    popup.session.doc.getLine = function (i) {\n      var data = popup.data[i];\n\n      if (typeof data == \"string\") {\n        return data;\n      }\n\n      return data && data.value || \"\";\n    };\n\n    var bgTokenizer = popup.session.bgTokenizer; // 提示框中每行的内容设置\n\n    bgTokenizer.$tokenizeRow = function (row) {\n      var data = popup.data[row];\n      var tokens = [];\n\n      if (!data) {\n        return tokens;\n      }\n\n      if (typeof data == \"string\") {\n        data = {\n          value: data\n        };\n      }\n\n      if (!data.caption) {\n        data.caption = data.value || data.name;\n      }\n\n      var last = -1;\n      var flag;\n      var c;\n\n      for (var i = 0; i < data.caption.length; i++) {\n        c = data.caption[i];\n        flag = data.matchMask & 1 << i ? 1 : 0;\n\n        if (last !== flag) {\n          tokens.push({\n            type: data.className || \"\" + (flag ? \"completion-highlight\" : \"\"),\n            value: c\n          });\n          last = flag;\n        } else {\n          tokens[tokens.length - 1].value += c;\n        }\n      } // 提示框中每一行的内容\n      // console.log(tokens)\n      //     (2) [{…}, {…}] \n      // 0: {\n      //         type: \"completion-highlight\",\n      //         value: \"a\"\n      //     }\n      // 1: {\n      //     type: \"\",\n      //     value: \"nd\"\n      // }\n      // 2: {\n      //     type: \"rightAlignedText\",\n      //     value: \"keyword\"\n      // }\n      // length: 3 __proto__: Array(0)\n\n\n      if (data.meta) {\n        // 提示框中最大字符数\n        var maxW = popup.renderer.$size.scrollerWidth / popup.renderer.layerConfig.characterWidth;\n        var metaData = data.meta;\n\n        if (metaData.length + data.caption.length > maxW - 2) {\n          metaData = metaData.substr(0, maxW - data.caption.length - 3) + \"\\u2026\"; // meta  +  ...\n        }\n\n        tokens.push({\n          type: \"rightAlignedText\",\n          value: metaData\n        });\n      }\n\n      return tokens;\n    };\n\n    bgTokenizer.$updateOnChange = noop;\n    bgTokenizer.start = noop;\n\n    popup.session.$computeWidth = function () {\n      return this.screenWidth = 0;\n    };\n\n    popup.$blockScrolling = Infinity;\n    popup.isOpen = false;\n    popup.isTopdown = false;\n    popup.autoSelect = true;\n    popup.data = [];\n\n    popup.setData = function (list) {\n      popup.setValue(lang.stringRepeat(\"\\n\", list.length), -1);\n      popup.data = list || [];\n      popup.setRow(0);\n    }; // 得到某一行的data\n\n\n    popup.getData = function (row) {\n      return popup.data[row];\n    }; // 获取选中行的行数\n\n\n    popup.getRow = function () {\n      return selectionMarker.start.row;\n    }; // 设置标记的行\n\n\n    popup.setRow = function (line) {\n      line = Math.max(this.autoSelect ? 0 : -1, Math.min(this.data.length, line));\n\n      if (selectionMarker.start.row != line) {\n        popup.selection.clearSelection();\n        selectionMarker.start.row = selectionMarker.end.row = line || 0;\n\n        popup.session._emit(\"changeBackMarker\");\n\n        popup.moveCursorTo(line || 0, 0);\n\n        if (popup.isOpen) {\n          popup._signal(\"select\");\n        }\n      }\n    };\n\n    popup.on(\"changeSelection\", function () {\n      if (popup.isOpen) {\n        popup.setRow(popup.selection.lead.row);\n      }\n\n      popup.renderer.scrollCursorIntoView();\n    });\n\n    popup.hide = function () {\n      this.container.style.display = \"none\";\n\n      this._signal(\"hide\");\n\n      popup.isOpen = false;\n    };\n\n    popup.show = function (pos, lineHeight, topdownOnly) {\n      var el = this.container;\n      var screenHeight = window.innerHeight;\n      var screenWidth = window.innerWidth;\n      var renderer = this.renderer; //  maxLines 8             lineHeight 18\n\n      var maxH = renderer.$maxLines * lineHeight * 1.4; //   光标位置   +   1\n\n      var top = pos.top + this.$borderSize; // 一下均为调整提示框出现的位置\n\n      var allowTopdown = top > screenHeight / 2 && !topdownOnly;\n\n      if (allowTopdown && top + lineHeight + maxH > screenHeight) {\n        renderer.$maxPixelHeight = top - 2 * this.$borderSize;\n        el.style.top = \"\";\n        el.style.bottom = screenHeight - top + \"px\";\n        popup.isTopdown = false;\n      } else {\n        top += lineHeight;\n        renderer.$maxPixelHeight = screenHeight - top - 0.2 * lineHeight;\n        el.style.top = top + \"px\";\n        el.style.bottom = \"\";\n        popup.isTopdown = true;\n      }\n\n      el.style.display = \"\"; // 确定字体大小的改变\n\n      this.renderer.$textLayer.checkForSizeChanges();\n      var left = pos.left; // el.offsetWidth  // 提示框的宽度\n\n      if (left + el.offsetWidth > screenWidth) {\n        left = screenWidth - el.offsetWidth;\n      }\n\n      el.style.left = left + \"px\";\n\n      this._signal(\"show\");\n\n      lastMouseEvent = null;\n      popup.isOpen = true;\n    };\n\n    popup.getTextLeftOffset = function () {\n      return this.$borderSize + this.renderer.$padding + this.$imageSize;\n    };\n\n    popup.$imageSize = 0;\n    popup.$borderSize = 1;\n    return popup;\n  };\n\n  dom.importCssString(\"\\\n.ace_editor.ace_autocomplete .ace_marker-layer .ace_active-line {\\\n    background-color: #CAD6FA;\\\n    z-index: 1;\\\n}\\\n.ace_editor.ace_autocomplete .ace_line-hover {\\\n    border: 1px solid #abbffe;\\\n    margin-top: -1px;\\\n    background: rgba(233,233,253,0.4);\\\n}\\\n.ace_editor.ace_autocomplete .ace_line-hover {\\\n    position: absolute;\\\n    z-index: 2;\\\n}\\\n.ace_editor.ace_autocomplete .ace_scroller {\\\n   background: none;\\\n   border: none;\\\n   box-shadow: none;\\\n}\\\n.ace_rightAlignedText {\\\n    color: gray;\\\n    display: inline-block;\\\n    position: absolute;\\\n    right: 4px;\\\n    text-align: right;\\\n    z-index: -1;\\\n}\\\n.ace_editor.ace_autocomplete .ace_completion-highlight{\\\n    color: #000;\\\n    text-shadow: 0 0 0.01em;\\\n}\\\n.ace_editor.ace_autocomplete {\\\n    width: 280px;\\\n    z-index: 200000;\\\n    background: #fbfbfb;\\\n    color: #444;\\\n    border: 1px lightgray solid;\\\n    position: fixed;\\\n    box-shadow: 2px 3px 5px rgba(0,0,0,.2);\\\n    line-height: 1.4;\\\n}\");\n  exports.AcePopup = AcePopup;\n});\nace.define(\"ace/autocomplete/util\", [\"require\", \"exports\", \"module\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  exports.parForEach = function (array, fn, callback) {\n    var completed = 0;\n    var arLength = array.length;\n\n    if (arLength === 0) {\n      callback();\n    }\n\n    for (var i = 0; i < arLength; i++) {\n      fn(array[i], function (result, err) {\n        completed++;\n\n        if (completed === arLength) {\n          callback(result, err);\n        }\n      });\n    }\n  };\n\n  var ID_REGEX = /[a-zA-Z_0-9\\$\\-\\u00A2-\\uFFFF\\.]+/;\n\n  exports.retrievePrecedingIdentifier = function (text, pos, regex) {\n    regex = regex || ID_REGEX;\n    var buf = [];\n\n    for (var i = pos - 1; i >= 0; i--) {\n      if (regex.test(text[i])) {\n        buf.push(text[i]);\n      } else {\n        break;\n      }\n    }\n\n    return buf.reverse().join(\"\");\n  };\n\n  exports.retrieveFollowingIdentifier = function (text, pos, regex) {\n    regex = regex || ID_REGEX;\n    var buf = [];\n\n    for (var i = pos; i < text.length; i++) {\n      if (regex.test(text[i])) {\n        buf.push(text[i]);\n      } else {\n        break;\n      }\n    }\n\n    return buf;\n  };\n\n  exports.getCompletionPrefix = function (editor) {\n    var pos = editor.getCursorPosition();\n    var line = editor.session.getLine(pos.row);\n    var prefix;\n    editor.completers.forEach(function (completer) {\n      if (completer.identifierRegexps) {\n        completer.identifierRegexps.forEach(function (identifierRegex) {\n          if (!prefix && identifierRegex) {\n            prefix = this.retrievePrecedingIdentifier(line, pos.column, identifierRegex);\n          }\n        }.bind(this));\n      }\n    }.bind(this));\n    return prefix || this.retrievePrecedingIdentifier(line, pos.column);\n  };\n});\nace.define(\"ace/autocomplete\", [\"require\", \"exports\", \"module\", \"ace/keyboard/hash_handler\", \"ace/autocomplete/popup\", \"ace/autocomplete/util\", \"ace/lib/event\", \"ace/lib/lang\", \"ace/lib/dom\", \"ace/snippets\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var HashHandler = acequire(\"./keyboard/hash_handler\").HashHandler;\n  var AcePopup = acequire(\"./autocomplete/popup\").AcePopup;\n  var util = acequire(\"./autocomplete/util\");\n  var event = acequire(\"./lib/event\");\n  var lang = acequire(\"./lib/lang\");\n  var dom = acequire(\"./lib/dom\");\n  var snippetManager = acequire(\"./snippets\").snippetManager;\n\n  var Autocomplete = function Autocomplete() {\n    this.autoInsert = false;\n    this.autoSelect = true;\n    this.exactMatch = false;\n    this.gatherCompletionsId = 0;\n    this.keyboardHandler = new HashHandler();\n    this.keyboardHandler.bindKeys(this.commands);\n    this.blurListener = this.blurListener.bind(this);\n    this.changeListener = this.changeListener.bind(this);\n    this.mousedownListener = this.mousedownListener.bind(this);\n    this.mousewheelListener = this.mousewheelListener.bind(this); //一旦变化就更新completions\n\n    this.changeTimer = lang.delayedCall(function () {\n      this.updateCompletions(true);\n    }.bind(this)); //     ƒ _self(timeout) {\n    //          if (timer == null) \n    //              timer = setTimeout(callback, timeout || defaultTimeout);\n    //      }\n\n    this.tooltipTimer = lang.delayedCall(this.updateDocTooltip.bind(this), 50);\n  };\n\n  (function () {\n    this.$init = function () {\n      this.popup = new AcePopup(document.body || document.documentElement);\n      this.popup.on(\"click\", function (e) {\n        this.insertMatch();\n        e.stop();\n      }.bind(this));\n      this.popup.focus = this.editor.focus.bind(this.editor);\n      this.popup.on(\"show\", this.tooltipTimer.bind(null, null));\n      this.popup.on(\"select\", this.tooltipTimer.bind(null, null));\n      this.popup.on(\"changeHoverMarker\", this.tooltipTimer.bind(null, null));\n      return this.popup;\n    };\n\n    this.getPopup = function () {\n      return this.popup || this.$init();\n    }; // 5. popup\n\n\n    this.openPopup = function (editor, prefix, keepPopupPosition) {\n      if (!this.popup) {\n        this.$init();\n      }\n\n      this.popup.autoSelect = this.autoSelect; // true\n\n      this.popup.setData(this.completions.filtered);\n      editor.keyBinding.addKeyboardHandler(this.keyboardHandler);\n      var renderer = editor.renderer;\n      this.popup.setRow(this.autoSelect ? 0 : -1); // 只接受prefix的第一个字母\n\n      if (!keepPopupPosition) {\n        // 设置主题为编辑器主题\n        this.popup.setTheme(editor.getTheme()); // 设置字体大小\n\n        this.popup.setFontSize(editor.getFontSize());\n        var lineHeight = renderer.layerConfig.lineHeight;\n        var pos = renderer.$cursorLayer.getPixelPosition(this.base, true); // getTextLeftOffset()  提示框左边的补偿宽度  5   px\n\n        pos.left -= this.popup.getTextLeftOffset(); // 代码区 1900 * 1200  top 8 left 8\n\n        var rect = editor.container.getBoundingClientRect(); //  pos.top + rect.top   pos.top +8 - 0  rect.top为8px向下偏移\n\n        pos.top += rect.top - renderer.layerConfig.offset; //pos.left + rect.left   pos.top + 8 -0\n        // var pat1 = /[a-zA-Z_0-9\\$\\-\\u00A2-\\uFFFF]{1,}[\\.]$/\n        // if (pat1.test(prefix)) {\n        //     pos.left += prefix.length * 8\n        // }\n\n        pos.left += rect.left - editor.renderer.scrollLeft; // pos.left + 42    左边沟槽的宽度\n\n        pos.left += renderer.gutterWidth;\n        this.popup.show(pos, lineHeight);\n      } else if (keepPopupPosition && !prefix) {\n        this.detach();\n      }\n    };\n\n    this.detach = function () {\n      this.editor.keyBinding.removeKeyboardHandler(this.keyboardHandler);\n      this.editor.off(\"changeSelection\", this.changeListener);\n      this.editor.off(\"blur\", this.blurListener);\n      this.editor.off(\"mousedown\", this.mousedownListener);\n      this.editor.off(\"mousewheel\", this.mousewheelListener);\n      this.changeTimer.cancel();\n      this.hideDocTooltip(); //每detach一次就+1\n\n      this.gatherCompletionsId += 1;\n\n      if (this.popup && this.popup.isOpen) {\n        this.popup.hide();\n      }\n\n      if (this.base) {\n        this.base.detach();\n      }\n\n      this.activated = false;\n      this.completions = this.base = null;\n    }; // 输入发生改变\n\n\n    this.changeListener = function (e) {\n      var cursor = this.editor.selection.lead; // 不同行或光标在单词前面\n\n      if (cursor.row != this.base.row || cursor.column < this.base.column) {\n        this.detach();\n      } // 调用updatecompletions()\n\n\n      if (this.activated) {\n        this.changeTimer.schedule();\n      } else {\n        this.detach();\n      }\n    }; //  失焦后仍然保持提示框\n\n\n    this.blurListener = function (e) {\n      // 光标之后的一个字节textarea\n      var el = document.activeElement; // el = text\n\n      var text = this.editor.textInput.getElement(); // null\n\n      var fromTooltip = e.relatedTarget && this.tooltipNode && this.tooltipNode.contains(e.relatedTarget); // 提示框\n\n      var container = this.popup && this.popup.container;\n\n      if (el != text && el.parentNode != container && !fromTooltip && el != this.tooltipNode && e.relatedTarget != text) {\n        this.detach();\n      }\n    };\n\n    this.mousedownListener = function (e) {\n      this.detach();\n    };\n\n    this.mousewheelListener = function (e) {\n      this.detach();\n    };\n\n    this.goTo = function (where) {\n      var row = this.popup.getRow();\n      var max = this.popup.session.getLength() - 1;\n\n      switch (where) {\n        case \"up\":\n          row = row <= 0 ? max : row - 1;\n          break;\n\n        case \"down\":\n          row = row >= max ? -1 : row + 1;\n          break;\n\n        case \"start\":\n          row = 0;\n          break;\n\n        case \"end\":\n          row = max;\n          break;\n      }\n\n      this.popup.setRow(row);\n    };\n\n    this.insertMatch = function (data, options) {\n      if (!data) {\n        data = this.popup.getData(this.popup.getRow());\n      }\n\n      if (!data) {\n        return false;\n      }\n\n      if (data.completer && data.completer.insertMatch) {\n        data.completer.insertMatch(this.editor, data);\n      } else {\n        if (this.completions.filterText) {\n          // 输入的前缀的起始位置到结束位置\n          var ranges = this.editor.selection.getAllRanges();\n          var pat1 = /[a-zA-Z_0-9\\$\\-\\u00A2-\\uFFFF\\.]{1,}[\\.]$/;\n\n          for (var i = 0, range; range = ranges[i]; i++) {\n            // bug? range.start.colum = range.end.colum\n            if (!pat1.test(this.completions.filterText)) {\n              range.start.column -= this.completions.filterText.length;\n            }\n\n            this.editor.session.remove(range);\n          }\n        }\n\n        if (data.snippet) {\n          snippetManager.insertSnippet(this.editor, data.snippet);\n        } else {\n          this.editor.execCommand(\"insertstring\", data.value || data);\n        }\n      }\n\n      this.detach();\n    };\n\n    this.commands = {\n      \"Up\": function Up(editor) {\n        editor.completer.goTo(\"up\");\n      },\n      \"Down\": function Down(editor) {\n        editor.completer.goTo(\"down\");\n      },\n      \"Ctrl-Up|Ctrl-Home\": function CtrlUpCtrlHome(editor) {\n        editor.completer.goTo(\"start\");\n      },\n      \"Ctrl-Down|Ctrl-End\": function CtrlDownCtrlEnd(editor) {\n        editor.completer.goTo(\"end\");\n      },\n      \"Esc\": function Esc(editor) {\n        editor.completer.detach();\n      },\n      // 回车键\n      \"Return\": function Return(editor) {\n        return editor.completer.insertMatch();\n      },\n      \"Shift-Return\": function ShiftReturn(editor) {\n        editor.completer.insertMatch(null, {\n          deleteSuffix: true\n        });\n      },\n      \"Tab\": function Tab(editor) {\n        var result = editor.completer.insertMatch();\n\n        if (!result && !editor.tabstopManager) {\n          editor.completer.goTo(\"down\");\n        } else {\n          return result;\n        }\n      },\n      \"PageUp\": function PageUp(editor) {\n        editor.completer.popup.gotoPageUp();\n      },\n      \"PageDown\": function PageDown(editor) {\n        editor.completer.popup.gotoPageDown();\n      }\n    }; // 收集补全信息（为过滤，所有补全器的信息） 用回调函数把补全信息传出去\n\n    this.gatherCompletions = function (editor, callback) {\n      var session = editor.getSession();\n      var pos = editor.getCursorPosition(); // 获取输入的前缀\n\n      var prefix = util.getCompletionPrefix(editor); // 前缀第一个字母的位置，用于确定div出现的位置\n\n      this.base = session.doc.createAnchor(pos.row, pos.column - prefix.length);\n      this.base.$insertRight = true;\n      var matches = [];\n      var total = editor.completers.length; // 遍历执行每个补全器\n\n      editor.completers.forEach(function (completer, i) {\n        // 获取补全列表\n        completer.getCompletions(editor, session, pos, prefix, function (err, results) {\n          // 在没有发生错误的时候，将结果合并到matchs中\n          if (!err && results) {\n            matches = matches.concat(results);\n          } //  回调\n\n\n          callback(null, {\n            prefix: util.getCompletionPrefix(editor),\n            matches: matches,\n            finished: --total === 0\n          });\n        });\n      });\n      return true;\n    }; // 3.\n\n\n    this.showPopup = function (editor) {\n      //初始化\n      if (this.editor) {\n        this.detach();\n      }\n\n      this.activated = true;\n      this.editor = editor;\n\n      if (editor.completer != this) {\n        if (editor.completer) {\n          editor.completer.detach();\n        }\n\n        editor.completer = this;\n      }\n\n      editor.on(\"changeSelection\", this.changeListener);\n      editor.on(\"blur\", this.blurListener);\n      editor.on(\"mousedown\", this.mousedownListener);\n      editor.on(\"mousewheel\", this.mousewheelListener);\n      this.updateCompletions();\n    }; // 4.\n\n\n    this.updateCompletions = function (keepPopupPosition) {\n      // 前缀后续触发\n      if (keepPopupPosition && this.base && this.completions) {\n        // 获取位置和前缀\n        var pos = this.editor.getCursorPosition();\n        var prefix = this.editor.session.getTextRange({\n          start: this.base,\n          end: pos\n        }); // 前缀没有改变就返回\n\n        if (prefix == this.completions.filterText) {\n          return;\n        } // 设置过滤器\n\n\n        this.completions.setFilter(prefix);\n\n        if (!this.completions.filtered.length) {\n          return this.detach();\n        } // if (this.completions.filtered.length == 1 &&\n        //     this.completions.filtered[0].value == prefix &&\n        //     !this.completions.filtered[0].snippet)\n        //     return this.detach();\n\n\n        this.openPopup(this.editor, prefix, keepPopupPosition);\n        return;\n      }\n\n      var _id = this.gatherCompletionsId; // 前缀第一个字母触发\n\n      this.gatherCompletions(this.editor, function (err, results) {\n        // 匹配完成就解绑\n        var detachIfFinished = function () {\n          if (!results.finished) {\n            return;\n          }\n\n          return this.detach();\n        }.bind(this);\n\n        var prefix = results.prefix;\n        var matches = results && results.matches;\n\n        if (!matches || !matches.length) {\n          return detachIfFinished();\n        }\n\n        if (prefix.indexOf(results.prefix) !== 0 || _id != this.gatherCompletionsId) {\n          return;\n        }\n\n        this.completions = new FilteredList(matches);\n\n        if (this.exactMatch) {\n          this.completions.exactMatch = true;\n        }\n\n        this.completions.setFilter(prefix);\n        var filtered = this.completions.filtered;\n\n        if (!filtered.length) {\n          return detachIfFinished();\n        } // if (filtered.length == 1 && filtered[0].value == prefix && !filtered[0].snippet)\n        //     return detachIfFinished();\n\n\n        if (this.autoInsert && filtered.length == 1 && results.finished) {\n          return this.insertMatch(filtered[0]);\n        }\n\n        this.openPopup(this.editor, prefix, keepPopupPosition);\n      }.bind(this));\n    };\n\n    this.cancelContextMenu = function () {\n      this.editor.$mouseHandler.cancelContextMenu();\n    }; // snippets\n\n\n    this.updateDocTooltip = function () {\n      var popup = this.popup;\n      var all = popup.data; //  提示框中hover到的行或者所在的行\n\n      var selected = all && (all[popup.getHoveredRow()] || all[popup.getRow()]);\n      var doc = null;\n\n      if (!selected || !this.editor || !this.popup.isOpen) {\n        return this.hideDocTooltip();\n      }\n\n      this.editor.completers.some(function (completer) {\n        if (completer.getDocTooltip) {\n          doc = completer.getDocTooltip(selected);\n        }\n\n        return doc;\n      });\n\n      if (!doc) {\n        doc = selected;\n      }\n\n      if (typeof doc == \"string\") {\n        doc = {\n          docText: doc\n        };\n      }\n\n      if (!doc || !(doc.docHTML || doc.docText)) {\n        return this.hideDocTooltip();\n      }\n\n      this.showDocTooltip(doc);\n    };\n\n    this.showDocTooltip = function (item) {\n      if (!this.tooltipNode) {\n        this.tooltipNode = dom.createElement(\"div\");\n        this.tooltipNode.className = \"ace_tooltip ace_doc-tooltip\";\n        this.tooltipNode.style.margin = 0;\n        this.tooltipNode.style.pointerEvents = \"auto\";\n        this.tooltipNode.tabIndex = -1;\n        this.tooltipNode.onblur = this.blurListener.bind(this);\n        this.tooltipNode.onclick = this.onTooltipClick.bind(this);\n      }\n\n      var tooltipNode = this.tooltipNode;\n\n      if (item.docHTML) {\n        tooltipNode.innerHTML = item.docHTML;\n      } else if (item.docText) {\n        tooltipNode.textContent = item.docText;\n      }\n\n      if (!tooltipNode.parentNode) {\n        document.body.appendChild(tooltipNode);\n      }\n\n      var popup = this.popup;\n      var rect = popup.container.getBoundingClientRect();\n      tooltipNode.style.top = popup.container.style.top;\n      tooltipNode.style.bottom = popup.container.style.bottom;\n\n      if (window.innerWidth - rect.right < 320) {\n        tooltipNode.style.right = window.innerWidth - rect.left + \"px\";\n        tooltipNode.style.left = \"\";\n      } else {\n        tooltipNode.style.left = rect.right + 1 + \"px\";\n        tooltipNode.style.right = \"\";\n      }\n\n      tooltipNode.style.display = \"block\";\n    };\n\n    this.hideDocTooltip = function () {\n      this.tooltipTimer.cancel();\n\n      if (!this.tooltipNode) {\n        return;\n      }\n\n      var el = this.tooltipNode;\n\n      if (!this.editor.isFocused() && document.activeElement == el) {\n        this.editor.focus();\n      }\n\n      this.tooltipNode = null;\n\n      if (el.parentNode) {\n        el.parentNode.removeChild(el);\n      }\n    };\n\n    this.onTooltipClick = function (e) {\n      var a = e.target;\n\n      while (a && a != this.tooltipNode) {\n        if (a.nodeName == \"A\" && a.href) {\n          a.rel = \"noreferrer\";\n          a.target = \"_blank\";\n          break;\n        }\n\n        a = a.parentNode;\n      }\n    };\n  }).call(Autocomplete.prototype);\n  Autocomplete.startCommand = {\n    name: \"startAutocomplete\",\n    exec: function exec(editor) {\n      if (!editor.completer) {\n        editor.completer = new Autocomplete();\n      }\n\n      editor.completer.autoInsert = false;\n      editor.completer.autoSelect = true;\n      editor.completer.showPopup(editor);\n      editor.completer.cancelContextMenu();\n    },\n    bindKey: \"Ctrl-Space|Ctrl-Shift-Space|Alt-Space\"\n  };\n\n  var FilteredList = function FilteredList(array, filterText) {\n    this.all = array;\n    this.filtered = array;\n    this.filterText = filterText || \"\";\n    this.exactMatch = false;\n  };\n\n  (function () {\n    this.setFilter = function (str) {\n      if (str.length > this.filterText && str.lastIndexOf(this.filterText, 0) === 0) {\n        var matches = this.filtered;\n      } else {\n        var matches = this.all;\n      }\n\n      this.filterText = str; //匹配xxx.\n\n      var dott = [];\n      var pat1 = /[a-zA-Z_0-9\\$\\-\\u00A2-\\uFFFF\\.]{1,}[\\.]$/;\n      var pat2 = /[a-zA-Z_0-9\\$\\-\\u00A2-\\uFFFF\\.]{1,}[^\\.]$/;\n\n      if (pat2.test(str)) {\n        if (str.indexOf('.') != -1) {\n          this.filterText = str.substring(str.lastIndexOf('.') + 1, str.length); // console.log(this.filterText)\n        } // this.this.filterText = str\n\n      }\n\n      if (pat1.test(str)) {\n        console.log(str);\n        var str1 = str.substr(0, str.length - 1);\n        var index = str.indexOf('.');\n        var str2 = str.substring(index + 1, str.length - 1);\n        matches.forEach(function (match) {\n          if ((match.value == str1 || match.value == str2) && match.obj) {\n            for (var i = 0; i < match.obj.length; i++) {\n              dott.push(match.obj[i]);\n            }\n          }\n\n          if ((match.value == str1 || match.value == str2) && match.func) {\n            for (var i = 0; i < match.func.length; i++) {\n              dott.push(match.func[i]);\n            }\n          }\n        });\n        this.filtered = dott;\n        return true;\n      } //过滤completions\n\n\n      matches = this.filterCompletions(matches, this.filterText); // 按exactMatch、score由高到低排序\n\n      matches = matches.sort(function (a, b) {\n        return b.exactMatch - a.exactMatch || b.score - a.score;\n      });\n      var prev = null; // 过滤掉值为null的completions\n\n      matches = matches.filter(function (item) {\n        var caption = item.snippet || item.caption || item.value;\n\n        if (caption === prev) {\n          return false;\n        } // 单词名\n\n\n        prev = caption;\n        return true;\n      });\n      this.filtered = matches;\n    }; //过滤补全列表 并设置优先级    // matches  str\n\n\n    this.filterCompletions = function (items, needle) {\n      var results = [];\n      var upper = needle.toUpperCase();\n      var lower = needle.toLowerCase();\n\n      loop: for (var i = 0, item; item = items[i]; i++) {\n        var caption = item.value || item.caption || item.snippet;\n\n        if (!caption) {\n          continue;\n        }\n\n        var lastIndex = -1;\n        var matchMask = 0;\n        var penalty = 0;\n        var index;\n        var distance;\n\n        if (this.exactMatch) {\n          //精确匹配下输入的不是首字母\n          if (needle !== caption.substr(0, needle.length)) {\n            continue loop;\n          }\n        } else {\n          for (var j = 0; j < needle.length; j++) {\n            //caption 补全列表中的值  i1为输入的字符中的小写字母在补全列表值第一次出现的位置\n            var i1 = caption.indexOf(lower[j], lastIndex + 1);\n            var i2 = caption.indexOf(upper[j], lastIndex + 1); // i2为大写字母比小写字母先出现，其他情况为i1\n\n            index = i1 >= 0 ? i2 < 0 || i1 < i2 ? i1 : i2 : i2;\n\n            if (index < 0) {\n              continue loop;\n            } // index\n\n\n            distance = index - lastIndex - 1;\n\n            if (distance > 0) {\n              if (lastIndex === -1) {\n                penalty += 10;\n              }\n\n              penalty += distance;\n            } // 1左移index位，即2的index次方\n\n\n            matchMask = matchMask | 1 << index;\n            lastIndex = index;\n          }\n        }\n\n        item.matchMask = matchMask; // 如有处罚，就不是精准匹配, 当distance=0即首字母匹配时，penalty=0，为精准匹配\n\n        item.exactMatch = penalty ? 0 : 1; // 匹配时，字母越靠后，score越小\n\n        item.score = (item.score || 0) - penalty;\n        results.push(item);\n      }\n\n      return results;\n    };\n  }).call(FilteredList.prototype);\n  exports.Autocomplete = Autocomplete;\n  exports.FilteredList = FilteredList;\n});\nace.define(\"ace/autocomplete/text_completer\", [\"require\", \"exports\", \"module\", \"ace/range\"], function (acequire, exports, module) {\n  var Range = acequire(\"../range\").Range; // 空格符\\t \\n \\r \\f \n\n  var splitRegex = /[^a-zA-Z_0-9\\$\\-\\u00C0-\\u1FFF\\u2C00-\\uD7FF\\w]+/; //  返回传入单词位置的索引  pos\n\n  function getWordIndex(doc, pos) {\n    //规定一个新range （（0,0），光标pos）\n    var textBefore = doc.getTextRange(Range.fromPoints({\n      row: 0,\n      column: 0\n    }, pos)); // 光标之前所有单词数量-1\n\n    return textBefore.split(splitRegex).length - 1;\n  } //返回 wordScores对象，其中属性为各单词的score  \n\n\n  function wordDistance(doc, pos) {\n    // 该单词索引\n    var prefixPos = getWordIndex(doc, pos); //  所有单词集合的数组\n\n    var words = doc.getValue().split(splitRegex); //   createEmpty() 最终返回 { \"__proto__\": null };\n\n    var wordScores = Object.create(null); // 当前单词\n\n    var currentWord = words[prefixPos];\n    words.forEach(function (word, idx) {\n      if (!word || word === currentWord) {\n        return;\n      } // 单词到当前单词的距离\n\n\n      var distance = Math.abs(prefixPos - idx); //总单词数组长度 - 距离\n\n      var score = words.length - distance;\n\n      if (wordScores[word]) {\n        wordScores[word] = Math.max(score, wordScores[word]);\n      } else {\n        // 创建属性并赋值为score\n        wordScores[word] = score;\n      }\n    });\n    return wordScores;\n  } // 回调函数返回[{},{补全信息}]\n\n\n  exports.getCompletions = function (editor, session, pos, prefix, callback) {\n    var wordScore = wordDistance(session, pos, prefix); // 返回传入对象的所有可枚举属性\n\n    var wordList = Object.keys(wordScore);\n    callback(null, wordList.map(function (word) {\n      return {\n        caption: word,\n        value: word,\n        score: wordScore[word],\n        meta: \"local\"\n      };\n    }));\n  };\n});\nace.define(\"ace/ext/language_tools\", [\"require\", \"exports\", \"module\", \"ace/snippets\", \"ace/autocomplete\", \"ace/config\", \"ace/lib/lang\", \"ace/autocomplete/util\", \"ace/autocomplete/text_completer\", \"ace/editor\", \"ace/config\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var snippetManager = acequire(\"../snippets\").snippetManager;\n  var Autocomplete = acequire(\"../autocomplete\").Autocomplete;\n  var config = acequire(\"../config\");\n  var lang = acequire(\"../lib/lang\");\n  var util = acequire(\"../autocomplete/util\");\n  var textCompleter = acequire(\"../autocomplete/text_completer\");\n  var keyWordCompleter = {\n    getCompletions: function getCompletions(editor, session, pos, prefix, callback) {\n      if (session.$mode.completer) {\n        return session.$mode.completer.getCompletions(editor, session, pos, prefix, callback);\n      } //  start\n\n\n      var state = editor.session.getState(pos.row);\n      var completions = session.$mode.getCompletions(state, session, pos, prefix);\n      callback(null, completions);\n    }\n  };\n  var snippetCompleter = {\n    getCompletions: function getCompletions(editor, session, pos, prefix, callback) {\n      var snippetMap = snippetManager.snippetMap;\n      var completions = [];\n      snippetManager.getActiveScopes(editor).forEach(function (scope) {\n        var snippets = snippetMap[scope] || [];\n\n        for (var i = snippets.length; i--;) {\n          var s = snippets[i];\n          var caption = s.name || s.tabTrigger;\n\n          if (!caption) {\n            continue;\n          }\n\n          completions.push({\n            caption: caption,\n            snippet: s.content,\n            meta: s.tabTrigger && !s.name ? s.tabTrigger + \"\\u21E5 \" : \"snippet\",\n            type: \"snippet\"\n          });\n        }\n      }, this);\n      callback(null, completions);\n    },\n    getDocTooltip: function getDocTooltip(item) {\n      if (item.type == \"snippet\" && !item.docHTML) {\n        item.docHTML = [\"<b>\", lang.escapeHTML(item.caption), \"</b>\", \"<hr></hr>\", lang.escapeHTML(item.snippet)].join(\"\");\n      }\n    }\n  };\n  var completers = [snippetCompleter, textCompleter, keyWordCompleter];\n\n  exports.setCompleters = function (val) {\n    completers.length = 0;\n\n    if (val) {\n      completers.push.apply(completers, val);\n    }\n  };\n\n  exports.addCompleter = function (completer) {\n    completers.push(completer);\n  };\n\n  exports.textCompleter = textCompleter;\n  exports.keyWordCompleter = keyWordCompleter;\n  exports.snippetCompleter = snippetCompleter;\n  var expandSnippet = {\n    name: \"expandSnippet\",\n    exec: function exec(editor) {\n      return snippetManager.expandWithTab(editor);\n    },\n    bindKey: \"Tab\"\n  };\n\n  var onChangeMode = function onChangeMode(e, editor) {\n    loadSnippetsForMode(editor.session.$mode);\n  };\n\n  var loadSnippetsForMode = function loadSnippetsForMode(mode) {\n    var id = mode.$id;\n\n    if (!snippetManager.files) {\n      snippetManager.files = {};\n    }\n\n    loadSnippetFile(id);\n\n    if (mode.modes) {\n      mode.modes.forEach(loadSnippetsForMode);\n    }\n  };\n\n  var loadSnippetFile = function loadSnippetFile(id) {\n    if (!id || snippetManager.files[id]) {\n      return;\n    }\n\n    var snippetFilePath = id.replace(\"mode\", \"snippets\");\n    snippetManager.files[id] = {};\n    config.loadModule(snippetFilePath, function (m) {\n      if (m) {\n        snippetManager.files[id] = m;\n\n        if (!m.snippets && m.snippetText) {\n          m.snippets = snippetManager.parseSnippetFile(m.snippetText);\n        }\n\n        snippetManager.register(m.snippets || [], m.scope);\n\n        if (m.includeScopes) {\n          snippetManager.snippetMap[m.scope].includeScopes = m.includeScopes;\n          m.includeScopes.forEach(function (x) {\n            loadSnippetFile(\"ace/mode/\" + x);\n          });\n        }\n      }\n    });\n  }; //1.\n\n\n  var doLiveAutocomplete = function doLiveAutocomplete(e) {\n    var editor = e.editor; // undefined\n\n    var hasCompleter = editor.completer && editor.completer.activated;\n\n    if (e.command.name === \"backspace\") {\n      if (hasCompleter && !util.getCompletionPrefix(editor)) {\n        editor.completer.detach();\n      }\n    } else if (e.command.name === \"insertstring\") {\n      var prefix = util.getCompletionPrefix(editor); // new一个Autocomplete对象\n\n      if (prefix && !hasCompleter) {\n        if (!editor.completer) {\n          editor.completer = new Autocomplete();\n        }\n\n        editor.completer.autoInsert = false; // 调用showPopup\n\n        editor.completer.showPopup(editor);\n      }\n    }\n  };\n\n  var Editor = acequire(\"../editor\").Editor;\n  acequire(\"../config\").defineOptions(Editor.prototype, \"editor\", {\n    enableBasicAutocompletion: {\n      set: function set(val) {\n        if (val) {\n          if (!this.completers) {\n            this.completers = Array.isArray(val) ? val : completers;\n          }\n\n          this.commands.addCommand(Autocomplete.startCommand);\n        } else {\n          this.commands.removeCommand(Autocomplete.startCommand);\n        }\n      },\n      value: false\n    },\n    enableLiveAutocompletion: {\n      set: function set(val) {\n        if (val) {\n          if (!this.completers) {\n            this.completers = Array.isArray(val) ? val : completers;\n          }\n\n          this.commands.on('afterExec', doLiveAutocomplete);\n        } else {\n          this.commands.removeListener('afterExec', doLiveAutocomplete);\n        }\n      },\n      value: false\n    },\n    enableSnippets: {\n      set: function set(val) {\n        if (val) {\n          this.commands.addCommand(expandSnippet);\n          this.on(\"changeMode\", onChangeMode);\n          onChangeMode(null, this);\n        } else {\n          this.commands.removeCommand(expandSnippet);\n          this.off(\"changeMode\", onChangeMode);\n        }\n      },\n      value: false\n    }\n  });\n});\n\n(function () {\n  ace.acequire([\"ace/ext/language_tools\"], function () {});\n})();\n\nmodule.exports = window.ace.acequire(\"ace/ext/language_tools\");","map":null,"metadata":{},"sourceType":"script"}