{"ast":null,"code":"// {\n// \tesp32: [\n// \t\tos: [\n// \t\t\tlistdir\n// \t\t],\n// \t\tsys: [\n// \t\t],\n// \t\tspi: [\n// \t\t\twrite: {}\n// \t\t]\n// \t\tiic: [\n// \t\t\twirte: {}\n// \t\t]\n// \t]\n// }\nvar pythonCode = [{\n  // \tname: 'digitalRead', // 提示的名称，和value保持一致\n  // \tvalue: 'digitalRead', // 具体的提示代码\n  // \tscore: 100, // 代码的排序\n  // \tmeta: 'Digital I/O', // 代码的分类,描述\n  // \tobj: 'qwer' // 代码的归属\n  // }, {\n  // \tname: 'stream', // 提示的名称，和value保持一致\n  // \tvalue: 'stream', // 具体的提示代码\n  // \tscore: 100, // 代码的排序\n  // \tmeta: 'Communication', // 代码的分类,描述\n  // \tobj: 'erty' //代码的归属\n  // }, {\n  // \tname: '__displayhook__', // 提示的名称，和value保持一致\n  // \tvalue: '__displayhook__', // 具体的提示代码\n  // \tscore: 100, // 代码的排序\n  // \tmeta: 'function', // 代码的分类,描述\n  // \tobj: 'erty' //代码的归属\n  // }, {\n  // \tname: '__doc__', // 提示的名称，和value保持一致\n  // \tvalue: '__doc__', // 具体的提示代码\n  // \tscore: 100, // 代码的排序\n  // \tmeta: 'function', // 代码的分类,描述\n  // \tobj: 'erty' //代码的归属\n  // }, {\n  // \tname: '__excepthook__', // 提示的名称，和value保持一致\n  // \tvalue: '__excepthook__', // 具体的提示代码\n  // \tscore: 100, // 代码的排序\n  // \tmeta: 'function', // 代码的分类,描述\n  // \tobj: 'ertyu' //代码的归属\n  // }, {\n  // \tname: '__loader__', // 提示的名称，和value保持一致\n  // \tvalue: '__loader__', // 具体的提示代码\n  // \tscore: 100, // 代码的排序\n  // \tmeta: 'function', // 代码的分类,描述\n  // \tobj: 'erty' //代码的归属\n  // }, {\n  // \tname: 'ertyu', // 提示的名称，和value保持一致\n  // \tvalue: 'ertyu', // 具体的提示代码\n  // \tscore: 100, // 代码的排序\n  // \tmeta: 'object', // 代码的分类,描述\n  // \tobj: '' //代码的归属\n  // }, {\n  // \tname: 'obj1', // 提示的名称，和value保持一致\n  // \tvalue: 'obj1', // 具体的提示代码\n  // \tscore: 100, // 代码的排序\n  // \tmeta: 'object', // 代码的分类,描述\n  // \tobj: 'obj' //代码的归属\n  // }, {\n  // \tname: 'qwerty', // 提示的名称，和value保持一致\n  // \tvalue: 'qwerty', // 具体的提示代码\n  // \tscore: 100, // 代码的排序\n  // \tmeta: 'object', // 代码的分类,描述\n  // \tobj: 'obj1' //代码的归属\n  // }, {\n  // \tname: 'zxcvbnm', // 提示的名称，和value保持一致\n  // \tvalue: 'zxcvbnm', // 具体的提示代码\n  // \tscore: 100, // 代码的排序\n  // \tmeta: 'object', // 代码的分类,描述\n  // \tobj: 'obj1' //代码的归属\n  // }, {\n  name: 'esp32',\n  // 提示的名称，和value保持一致\n  value: 'esp32',\n  // 具体的提示代码\n  score: 100,\n  // 代码的排序\n  meta: 'object',\n  // 代码的分类,描述\n  obj: [{\n    // 代码包含的对象\n    name: 'spi',\n    value: 'spi',\n    score: 100,\n    meta: 'obj',\n    func: [{\n      name: 'write',\n      value: 'write',\n      score: 100,\n      meta: '123'\n    }, {\n      name: 'listen',\n      value: 'listen',\n      score: 100,\n      meta: '123'\n    }]\n  }, {\n    name: 'iic',\n    value: 'iic',\n    score: 100,\n    meta: 'obj',\n    func: [{\n      name: 'write',\n      value: 'write',\n      score: 100,\n      meta: 'function'\n    }, {\n      name: 'listen',\n      value: 'listen',\n      score: 100,\n      meta: 'function'\n    }]\n  }]\n}];\nvar pyCodeCompleter = {\n  getCompletions: function getCompletions(editor, session, pos, prefix, callback) {\n    var completions = [];\n    pythonCode.forEach(function (code) {\n      completions.push({\n        caption: code.name,\n        value: code.value,\n        score: code.score,\n        meta: code.meta,\n        obj: code.obj || '',\n        func: code.func || ''\n      });\n    }); // console.log(completions[completions.length - 1]);\n\n    callback(null, completions);\n  }\n};\nexport default pyCodeCompleter;","map":null,"metadata":{},"sourceType":"module"}